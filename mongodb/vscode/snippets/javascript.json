{
    // Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and 
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "basic sharding test": {
        "scope": "javascript",
        "prefix": "jstest",
        "body": [
            "import {ShardingTest} from \"jstests/libs/shardingtest.js\";",
            "import {configureFailPoint} from \"jstests/libs/fail_point_util.js\";",
            "import {funWithArgs} from \"jstests/libs/parallel_shell_helpers.js\";",
            "",
            "const st = new ShardingTest({",
            "\tmongos: 1,",
            "\tshards: 3,",
            "\trs: {nodes: 1},",
            "\tother: {",
            "\t\tenableBalancer: false, /* false by default */",
            "\t\tchunkSize: 1,\t\t  /* Set global max chunk size to 1MB */",
            "\t\trsOptions:",
            "\t\t\t{slowms: 0, setParameter: {logComponentVerbosity: tojson({sharding: {verbosity: 2}})}},",
            "\t\tconfigOptions: {",
            "\t\t\tsetParameter: {minSnapshotHistoryWindowInSeconds: 0, transactionLifetimeLimitSeconds: 1}",
            "\t\t},",
            "\t\tshardOptions: {",
            "\t\t\tsetParameter: {",
            "\t\t\t\treshardingCriticalSectionTimeoutMillis: 24 * 60 * 60 * 1000 /* 1 day */,",
            "\t\t\t\tminSnapshotHistoryWindowInSeconds: 0,",
            "\t\t\t\ttransactionLifetimeLimitSeconds: 1",
            "\t\t\t}",
            "\t\t}",
            "\t}",
            "});",
            "",
            "const db = st.s.getDB(jsTestName());",
            "const mongos = st.s;",
            "const coll = db.getCollection(\"coll\");",
            "const shard0 = st.shard0.shardName;",
            "const shard1 = st.shard1.shardName;",
            "const configRS = st.configRS;",
            "const shard0RS = st.shard0.rs;",
            "const shard1Primary = st.shard1.rs.getPrimary();",
            "",
            "///////////////",
            "// BASICS",
            "///////////////",
            "",
            "// Specify DBPrimary shard",
            "assert.commandWorked(st.s.adminCommand({enableSharding: db.getName(), primaryShard: shard0}));",
            "",
            "// Shard collection",
            "assert.commandWorked(st.s.adminCommand({shardCollection: coll.getFullName(), key: {x: 1}}));",
            "",
            "///////////////",
            "// FAILPOINTS",
            "///////////////",
            "",
            "// set failpoints",
            "const configPrimaryNode = st.configRS.getPrimary();",
            "const failpoint = configureFailPoint(configPrimaryNode, \"hangBeforeInvalidateSessionsForStepdown\");",
            "",
            "// wait failpoint",
            "failpoint.wait();",
            "",
            "// set off failpoint",
            "failpoint.off();",
            "",
            "///////////////",
            "// PARALLEL SHELL",
            "///////////////",
            "const waitForParallelShell =",
            "\tstartParallelShell(funWithArgs(function(collName) {",
            "\t\t\t\t\t\t   let lsid = assert.commandWorked(db.runCommand({startSession: 1})).id;",
            "",
            "\t\t\t\t\t\t   assert.commandFailedWithCode(db.adminCommand({",
            "\t\t\t\t\t\t\t   _configsvrSetAllowMigrations: collName,",
            "\t\t\t\t\t\t\t   allowMigrations: false,",
            "\t\t\t\t\t\t\t   lsid: lsid,",
            "\t\t\t\t\t\t\t   txnNumber: NumberLong(0),",
            "\t\t\t\t\t\t\t   stmtId: NumberInt(0),",
            "\t\t\t\t\t\t\t   writeConcern: {w: \"majority\", wtimeout: 60000}",
            "\t\t\t\t\t\t   }),",
            "\t\t\t\t\t\t\t\t\t\t\t\t\t\tErrorCodes.Interrupted);",
            "\t\t\t\t\t   }, coll.getFullName()), configPrimaryNode.port);",
            "",
            "// wait for shell",
            "waitForParallelShell();",
            "",
            "// close ShardingTest",
            "st.stop();"
        ],
        "description": "Basic js sharding test"
    },
    "Fail point configure": {
        "scope": "javascript",
        "prefix": "failpoint",
        "body": [
            "// TODO modify st.shard0""let fp = configureFailPoint(st.shard0, '$1');",
        ],
        "description": "Failpoint configure call"
    }
}