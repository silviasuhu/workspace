{
    "args": {},
    "pre_checks": {},
    "commands": {
        "debLaptop_enable_access_to_new_spawned_host": {
            "description": "Enable connection to an spawned host from the laptop",
            "cmd": "sudo sh -c \"echo '#Temporal spawned host:' >> /etc/ppp/ip-up;echo '/sbin/route add -host <<hostname>> -interface ppp0' >> /etc/ppp/ip-up\"; echo 'ssh <<username>>@<<hostname>>' > sshSpawnedHost.sh; chmod +x sshSpawnedHost.sh; echo 'scp <<username>>@<<hostname>>:/home/ec2-user/debug/gdb.txt .' > scpGdbTxt.sh; chmod +x scpGdbTxt.sh; echo 'Remember to restart the VPN connection'",
            "bell": false,
            "pre_checks": [],
            "parameters": {
                "hostname": {
                    "type": "input",
                    "description": "Url to access the spawned host",
                    "default": ""
                },
                "username": {
                    "type": "input",
                    "description": "Username to access the spawned host",
                    "default": "ec2-user"
                }
            }
        },
        "deb_gdb_stacktraces_to_html": {
            "description": "Convert gdb stacktraces to html",
            "cmd": "python /Users/silvia/projects/t2/scripts/gdb2stacks.py < <<gdb_stacktraces_file>> | python3 /Users/silvia/projects/t2/scripts/calltree.py > <<gdb_stacktraces_file>>.html",
            "bell": false,
            "pre_checks": [],
            "parameters": {
                "gdb_stacktraces_file": {
                    "type": "query",
                    "description": "File with stacktraces",
                    "query_cmd": "ls",
                    "default": "gdb.txt"
                }
            }
        },
        "deb_gdb_get_stacktraces_from_running_process": {
            "description": "Get stacktraces from a running process",
            "cmd": "gdb -p <<pid>> -batch -ex 'thread apply all bt' > gdb.txt",
            "bell": false,
            "pre_checks": [],
            "parameters": {
                "pid": {
                    "type": "input",
                    "description": "PID of the process",
                    "default": ""
                }
            }
        },
        "deb_mongod_run_locally": {
            "description": "Run mongod on the current directory",
            "cmd": "m <<version>> && mongod --dbpath . --setParameter recoverFromOplogAsStandalone=true --port <<port>>",
            "bell": false,
            "pre_checks": [],
            "parameters": {
                "port": {
                    "type": "input",
                    "description": "Port number",
                    "default": "27017"
                },
                "version": {
                    "type": "query",
                    "description": "mongod version",
                    "query_cmd": "m",
                    "default": ""
                }
            }
        },
        "deb_restore_config_dump": {
            "description": "Restore a config dump in gz format to an already running mongod process.",
            "cmd": "mongorestore --gzip --archive=<<path_to_gz_config_file>> --excludeCollection=settings",
            "bell": false,
            "pre_checks": [],
            "parameters": {
                "port": {
                    "type": "path_to_gz_config_file",
                    "description": "Path to the config dump file in gzip format.",
                    "default": "/home/ubuntu/config.gz"
                }
            }
        },
        "db_show_open_ports_by_mongo_processes": {
            "description": "Show open ports from mongo processes.",
            "cmd": "ss -lntp | grep mongo",
            "bell": false,
            "pre_checks": [],
            "parameters": {}
        }
    }
}
